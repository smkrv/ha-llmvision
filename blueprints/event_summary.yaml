blueprint:
  name: AI Event Summary (LLM Vision test)
  author: valentinfrlch
  description: >
    AI-powered security event summaries for frigate or camera entities. 
    Sends a notification with a preview to your phone that is updated dynamically when the AI summary is available.
  domain: automation
  
  input:
    mode:
      name: Mode
      description: Select the mode to use
      selector:
        select:
          options:
            - 'Frigate'
            - 'Camera'
    important:
      name: Important
      description: "Use AI to notify only on important events. Use with caution: AI can make mistakes."
      default: false
      selector:
        boolean:
    provider:
      name: Provider
      description: Configuration to use for the video_analyzer service. See docs for additional information.
      default: "openai"
      selector:
        select:
          options:
            - openai
            - huggingface
    notify_device:
      name: Notify Device
      description: The device to send the notification to
      selector:
        device:
          integration: mobile_app
    mqtt_topic:
      name: MQTT Topic
      description: "MQTT topic for Frigate messages."
      default: "frigate/events"
      selector:
        text:
          multiline: false
    notification_message:
      name: Notification Message
      description: "Customize the notification message using variables like {{ camera_name }} and {{ label }}."
      default: "A {{ label }} was detected on the {{ camera_name }} camera."
      selector:
        text:
          multiline: true
    frigate_url:
      name: Frigate URL
      description: (Frigate) Frigate's base URL to fetch a snapshot.
      default: "http://localhost:5000"
      selector:
        text:
          multiline: false
    base_url:
      name: Base URL
      description: "The base URL for notifications (local or external)."
      default: "http://localhost:5000"
      selector:
        text:
          multiline: false
    update_sub_label:
      name: Update Sub Label
      description: "Update the title and/or message with the matched face name."
      default: false
      selector:
        boolean:
    subtitle:
      name: Subtitle
      description: "Secondary heading for notifications."
      default: ""
      selector:
        text:
          multiline: false
    critical_notification:
      name: Critical Notification
      description: "Send as a critical notification to mobile device."
      default: false
      selector:
        boolean:
    alert_once:
      name: Alert Once
      description: "Only the first notification for each event will play a sound."
      default: false
      selector:
        boolean:
    update_image:
      name: Update Image
      description: "Update the notification if a new 'better' image is available."
      default: false
      selector:
        boolean:
    video:
      name: Video
      description: "Optional clip to attach to the notification."
      default: false
      selector:
        boolean:
    group:
      name: Group
      description: "Group name to determine notification grouping on the mobile device."
      default: "{{ camera }}"
      selector:
        text:
          multiline: false
    notification_sound:
      name: Notification Sound (iOS only)
      description: "Sound file for notifications."
      default: ""
      selector:
        text:
          multiline: false
    volume_sound:
      name: Volume Sound (iOS only)
      description: "Sound level between 0 and 100."
      default: 100
      selector:
        number:
          min: 0
          max: 100
    notification_channel:
      name: Notification Channel (Android only)
      description: "Custom channel for notifications."
      default: ""
      selector:
        text:
          multiline: false
    required_zones:
      name: Required Zones
      description: "Specify one zone at a time, in lowercase and with underscores."
      default: ""
      selector:
        text:
          multiline: true
    loitering_notifications:
      name: Loitering Notifications
      description: "Send loitering notifications if inactive for specified time."
      default: 0
      selector:
        number:
          min: 0
          max: 60
    motion_sensors:
      name: Motion Sensors
      description: "(Camera) List of motion sensor entities to monitor."
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: binary_sensor
    camera_entities:
      name: Camera Entities
      description: "(Camera) List of camera entities to monitor."
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: camera
    cooldown:
      name: Cooldown
      description: Time in minutes to wait before running again.
      default: 10
      selector:
        number:
          min: 0
          max: 60
    trigger_state:
      name: Trigger State
      description: (Camera) Trigger the automation when your cameras change to this state.
      default: 'recording'
      selector:
        text:
          multiline: false
    max_frames:
      name: Max Frames
      description: How many frames to analyze. Picks frames with the most movement.
      default: 3
      selector:
        number:
          min: 1
          max: 60
    model:
      name: Model
      description: Model to use for the video_analyzer service
      default: "gpt-4o-mini"
      selector:
        text:
          multiline: false
    message:
      name: Prompt
      description: Model prompt for the video_analyzer service
      default: "Summarize briefly what's happening in the camera feed (one sentence max). Don't describe the scene! If there is a person, describe what they're doing. If nothing is happening, say so."
      selector:
        text:
          multiline: true
    temperature:
      name: Temperature
      description: Randomness. Lower is more accurate, higher is more creative
      default: 0.1
      selector:
        number:
          min: 0.1
          max: 1.0
          step: 0.1
    max_tokens:
      name: Maximum Tokens
      description: Maximum number of tokens to generate
      default: 20
      selector:
        number:
          min: 1
          max: 100
    duration:
      name: Duration
      description: (Camera) How long to record for (in seconds)
      default: 5
      selector:
        number:
          min: 1
          max: 60
    tap_navigate:
      name: Tap Navigate
      description: Path to navigate to when tapping notification (e.g. /lovelace/cameras)
      default: "/lovelace/0"
      selector:
        text:
          multiline: false
    target_width:
      name: Target Width
      description: Width in pixels to downscale (uses less tokens)
      default: 1280
      selector:
        number:
          min: 512
          max: 3840
    detail:
      name: Detail
      description: Detail parameter (OpenAI only)
      default: 'low'
      selector:
        select:
          options:
            - 'high'
            - 'low'

variables:
  important: !input important
  base_url: !input base_url
  frigate_url: !input frigate_url
  mqtt_topic: !input mqtt_topic
  notification_message: !input notification_message
  provider: !input provider
  cooldown: !input cooldown
  mode: !input mode
  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  importance_prompt: "Your job is to decide whether a camera recording is important (so the user gets a notification) or not. Reply with 'yes' if the user should be notified or 'no' otherwise. Reply with these replies exactly."
  
  camera_entity: >
    {% if mode == 'Camera' %}
      {% if motion_sensors_list %}
        {% set index = motion_sensors_list.index(trigger.entity_id) %}
        {{ camera_entities_list[index] }}
      {% else %}
        {{ trigger.entity_id }}
      {% endif %}
    {% else %}
      {{ trigger.payload_json['after']['camera'] }}
    {% endif %}

  tag: >
    {% if mode == 'Frigate' %}
      {{ trigger.payload_json['after']['camera'] + int(as_timestamp(now())) | string }}
    {% else %}
      {{ camera_entity + int(as_timestamp(now())) | string }}
    {% endif %}

  group: >
    {% if mode == 'Frigate' %}
      {{ trigger.payload_json['after']['camera'] }}
    {% else %}
      {{ camera_entity }}
    {% endif %}

  label: >
    {% if mode == 'Frigate' %}
      {{ trigger.payload_json['after']['label'] | capitalize }} seen
    {% else %}
      Motion detected
    {% endif %}

  camera: >
    {% if mode == 'Frigate' %}
      {{ trigger.payload_json['after']['camera'].replace('_', ' ') | capitalize }}
    {% else %}
      {{ camera_entity.replace("camera.", "").replace("_", " ") | capitalize }}
    {% endif %}

  video: >
    {% if mode == 'Frigate' %}
      {{ base_url }}/api/events/{{ trigger.payload_json['after']['id'] }}/clip.mp4
    {% else %}
      ''
    {% endif %}

  image: >
    {% if mode == 'Frigate' %}
      ''
    {% else %}
      {{ base_url }}/api/camera_proxy/{{ camera_entity }}
    {% endif %}

  snapshot: >
    {% if mode == 'Frigate' %}
      {{ frigate_url }}/api/frigate/notifications/{{ trigger.payload_json['after']['id'] }}/snapshot.jpg?bbox=1&motion=1&regions=1
    {% else %}
      {{ base_url }}/api/camera_proxy/{{ camera_entity }}/snapshot.jpg
    {% endif %}

trigger:
  - platform: mqtt
    topic: "{{ mqtt_topic }}"
    id: frigate_trigger
  - platform: 'state'
    entity_id: !input camera_entities
    to: !input trigger_state
    id: 'camera_trigger'
  - platform: 'state'
    entity_id: !input motion_sensors
    to: 'on'
    id: 'motion_sensor_trigger'

condition:
  - condition: template
    value_template: >
      {% if mode == 'Frigate' %}
        {{ trigger.payload_json["type"] == "end" and (state_attr(this.entity_id, 'last_triggered') is none or (now() - state_attr(this.entity_id, 'last_triggered')).total_seconds() / 60 > cooldown) }}
      {% else %}
        {{ state_attr(this.entity_id, 'last_triggered') is none or (now() - state_attr(this.entity_id, 'last_triggered')).total_seconds() / 60 > cooldown }}
      {% endif %}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ important }}"
        sequence:
          - alias: "Decide Important"
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ mode == 'Frigate'}}"
                sequence:
                  - service: llmvision.image_analyzer
                    data:
                      image_entity: "{{ ['camera.' + trigger.payload_json['after']['camera'] | lower] }}"
                      provider: !input provider
                      model: !input model
                      message: "{{ importance_prompt }}"
                      include_filename: true
                      target_width: !input target_width
                      detail: !input detail
                      max_tokens: 1
                      temperature: !input temperature
                    response_variable: importance
              - conditions:
                  - condition: template
                    value_template: "{{ mode == 'Camera' }}"
                sequence:
                  - service: llmvision.image_analyzer
                    data:
                      image_entity: "{{[camera_entity]}}"
                      provider: !input provider
                      model: !input model
                      message: "{{ importance_prompt }}"
                      include_filename: true
                      target_width: !input target_width
                      detail: !input detail
                      max_tokens: 1
                      temperature: !input temperature
                    response_variable: importance

  # Cancel automation if event not deemed important
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ importance is defined and importance.response_text == 'no' }}"
        sequence:
          - stop: "Event is not important"
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ base_url is not none and base_url != '' }}"
        sequence:
          - alias: "Send instant notification without summary"
            domain: mobile_app
            type: notify
            device_id: !input notify_device
            title: "{{ label }}"
            message: >
              {% if update_sub_label %}
                {{ notification_message | replace('{{ camera_name }}', camera) | replace('{{ label }}', label) | replace('A Person', 'A ' + label) }}
              {% else %}
                {{ notification_message | replace('{{ camera_name }}', camera) | replace('{{ label }}', label) }}
              {% endif %}
            data:
              video: "{{ video }}"
              image: "{{ image }}"
              snapshot: "{{ snapshot }}"
              entity_id: "{{ camera_entity if mode=='Camera' else '' }}"
              url: !input tap_navigate # iOS
              clickAction: !input tap_navigate # Android
              tag: "{{ tag }}"
              group: "{{ group }}"
              subtitle: "{{ subtitle }}"  # Secondary heading for notifications
              sound: "{{ notification_sound }}"  # iOS only
              volume: "{{ volume_sound }}"  # iOS only
              notification_channel: "{{ notification_channel }}"  # Android only
              required_zones: "{{ required_zones }}"  # Required Zones
              loitering: "{{ loitering_notifications }}"  # Loitering Notifications

  - alias: "Analyze event"
    choose:
      - conditions:
          - condition: template
            value_template: "{{ mode == 'Frigate' }}"
        sequence:
          - service: llmvision.video_analyzer
            data:
              event_id: "{{ trigger.payload_json['after']['id'] }}"
              provider: !input provider
              model: !input model
              message: !input message
              include_filename: true
              max_frames: !input max_frames
              target_width: !input target_width
              detail: !input detail
              max_tokens: !input max_tokens
              temperature: !input temperature
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ mode == 'Camera' }}"
        sequence:
          - service: llmvision.stream_analyzer
            data:
              image_entity: "{{[camera_entity]}}"
              duration: !input duration
              provider: !input provider
              model: !input model
              message: !input message
              include_filename: true
              max_frames: !input max_frames
              target_width: !input target_width
              detail: !input detail
              max_tokens: !input max_tokens
              temperature: !input temperature
            response_variable: response

  - alias: "Send notification with summary"
    domain: mobile_app
    type: notify
    device_id: !input notify_device
    title: "{{ label }}"
    message: "{{ response.response_text }}"
    data:
      tag: "{{ tag }}"
      group: "{{ group }}"
      image: "{{ image }}"
      video: "{{ video }}"
      entity_id: "{{ camera_entity if mode=='Camera' else '' }}"
      url: !input tap_navigate # iOS
      clickAction: !input tap_navigate # Android
      push:
        interruption-level: passive
